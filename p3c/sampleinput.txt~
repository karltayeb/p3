Data
Structures
Spring
Project
pts
total
Due
pm
Logistics
Collaboration
You
should
work
on
this
assignment
with
a
partner
Resources
Shaffer
Chapters
and
Overall
Description
Fun
With
Maps
The
overall
purpose
of
this
assignment
is
to
build
and
use
classes
for
binary
search
trees
and
to
stress
test
them
at
an
interesting
scale
Part
A
Basic
Binary
Search
Tree
Implementation
due
pm
Wed
March
points
For
the
first
part
of
the
project
you
will
complete
a
class
BSTMap
that
implements
our
custom
MapJHU
java
map
interface
You
should
not
need
to
change
any
of
the
given
code
but
you
may
add
other
methods
and
variables
As
with
the
last
project
your
BSTMap
must
also
implement
some
of
the
Iterable
interface
from
the
Java
API
Here
are
some
details
regarding
the
implementation
Your
implementation
must
make
use
of
sentinels
forming
the
leaves
of
the
tree
That
is
every
leaf
node
is
an
empty
node
with
no
children
and
no
data
Your
implementation
should
make
use
of
a
nested
class
for
binary
tree
nodes
already
declared
for
you
The
reference
class
BSTree
is
a
nearly
complete
implementation
of
a
binary
search
tree
uses
sentinels
but
has
no
nested
class
just
to
help
you
get
started
Note
that
the
BSTMap
is
a
map
but
it
also
supports
a
few
additional
functions
like
creating
subsets
of
the
original
Map
that
fall
between
a
minimum
and
maximum
key
When
you
implement
the
iterator
you
may
find
it
easiest
to
create
an
intermediate
data
structure
e
g
a
List
that
the
iterator
works
from
You
are
not
required
to
implement
the
remove
functionality
However
points
of
extra
credit
are
available
if
you
do
and
can
prove
that
you
have
In
the
FWIW
for
what
it's
worth
column
another
more
general
way
to
do
this
would
be
to
implement
a
generic
binary
search
tree
and
then
to
use
Map
Entry
as
a
way
to
store
key
value
pairs
The
comparator
for
Map
Entry
would
operate
on
the
key
value
Then
BSTMap
would
simply
wrap
this
general
data
structure
and
add
Map
specific
functionality
If
you
prefer
to
try
this
approach
rather
than
use
our
code
you're
welcome
to
try
that
as
well
Part
B
Balanced
Binary
Search
Tree
Implementation
due
pm
Mon
April
points
The
implementation
above
doesn't
support
balancing
Extend
your
BSTMap
class
above
to
a
new
class
AVLMap
which
includes
maintaining
tree
balance
by
adding
the
appropriate
single
and
double
rotations
on
the
insert
and
remove
functions
Here's
a
few
hints
You
will
probably
find
it
useful
to
augment
each
node
to
store
the
height
of
the
tree
of
which
it
forms
the
root
Start
with
insert
and
carefully
test
it
on
cases
you
understand
Creating
a
way
to
print
the
structure
of
the
tree
e
g
by
printing
via
a
fully
parenthesized
in
order
traversal
that
includes
node
heights
will
be
helpful
to
verify
that
the
tree
is
doing
what
you
expect
Once
insert
works
tackle
the
tougher
case
of
delete
Part
C
Fun
with
Maps
due
pm
Fri
April
points
Finally
you'll
have
an
opportunity
to
see
the
impact
of
different
map
structures
We'll
use
our
maps
to
count
word
occurrences
in
a
document
as
follows
The
input
to
your
program
will
be
a
list
of
words
separated
by
white
space
spaces
or
line
breaks
Punctuation
will
be
stripped
for
you
I've
created
a
simple
program
to
generate
such
lists
that
you
can
download
here
to
help
create
test
input
A
fun
thing
to
do
is
to
run
this
on
the
source
code
for
your
own
program
Create
an
instantiation
of
a
map
as
further
described
below
we'll
experiment
with
Java
HashMaps
your
BSTMap
and
your
AVLMap
that
uses
the
word
as
a
string
as
the
key
and
has
a
data
field
that
holds
a
count
of
the
number
of
times
a
word
has
been
seen
Read
the
words
in
the
document
If
the
word
is
already
there
increment
the
associated
count
else
add
it
to
the
tree
with
a
count
of
Once
the
entire
list
of
words
is
read
create
a
reverse
index
by
extracting
all
key
value
pairs
in
your
map
and
inserting
the
string
into
a
second
AVLMap
This
AVLMap
uses
a
key
that
is
the
count
and
the
data
is
the
words
that
have
that
count
Note
that
this
is
now
a
dictionary
i
e
multiple
words
may
have
the
same
count
so
use
a
collection
of
some
sort
to
hold
the
words
associated
with
the
count
Please
submit
two
uses
of
your
program
Create
an
implementation
name
your
file
with
main
P
C
java
that
after
reading
in
all
the
words
prints
the
following
a
The
total
number
of
words
in
the
document
b
The
most
frequent
word
s
c
All
words
that
occur
at
most
three
times
d
All
words
that
occur
within
the
top
of
the
most
frequent
word
Create
an
implementation
name
your
file
with
main
P
C
java
that
does
the
following
a
Creates
hashmap
from
your
previous
assignment
or
the
Java
API
a
BSTMap
unbalanced
tree
from
part
A
and
an
AVLMap
balanced
tree
map
from
part
B
or
the
Java
API
TreeMap
b
Read
the
words
into
an
array
of
strings
before
you
start
c
Time
the
amount
of
time
it
takes
to
create
the
map
steps
above
for
each
instantiation
d
Prints
the
time
it
took
for
each
of
the
three
implementation
styles
e
Do
this
for
a
list
of
and
words
we'll
get
you
some
test
input
for
this
For
timing
you
may
find
this
rubic
helpful
long
lStartTime
System
currentTimeMillis
some
tasks
long
lEndTime
System
currentTimeMillis
long
difference
lEndTime
lStartTime
System
out
println
Elapsed
milliseconds
difference
Implementation
Requirements
You
may
not
reuse
or
adapt
code
from
any
sources
other
than
class
or
the
textbook
You
must
cite
the
original
sources
in
comments
Testing
You
may
find
it
useful
to
adapt
the
JUnit
test
from
the
last
assignment
to
check
whether
your
BSTMap
and
AVLMap
including
iterators
satisfy
the
core
requirements
for
Parts
A
B
respectively
Submission
and
Grading
You
should
submit
the
output
of
executing
your
program
on
our
test
input
for
both
uses
described
in
Part
C
You
must
submit
a
complete
zip
file
with
all
java
files
and
any
sample
input
along
with
a
plain
text
README
file
to
explain
any
problematic
parts
of
your
solution
on
Blackboard
before
each
due
date
Each
part
could
be
assessed
a
point
deduction
for
poor
style
These
style
points
include
efficiency
style
proper
documentation
javadoc
comments
etc
This
includes
making
all
code
except
JUnit
test
files
checkstyle
compliant
with
our
jhu
checks
configuration
file
Any
violation
of
the
implementation
requirements
is
likely
to
result
in
a
zero
grade
Remember
that
if
your
classes
don't
all
compile
together
you
will
get
a
zero
for
the
entire
project
General
assignment
requirements
style
and
submission
details
Identification
You
must
include
a
header
comment
with
your
name
Blackboard
login
the
course
number
and
section
and
the
assignment
number
P
P
etc
in
every
java
file
you
write
Compilation
Source
code
java
must
compile
in
standard
Java
version
on
the
ugrad
servers
You
must
not
have
any
package
declarations
in
your
files
Remember
you
will
receive
NO
credit
for
programs
that
do
not
compile
on
the
ugrad
servers
Use
incremental
coding
to
insure
that
you
always
have
a
working
program
even
though
it
might
be
incomplete
Electronic
Submission
Submit
an
electronic
copy
of
each
graded
programming
assignment
in
one
complete
zip
file
via
Blackboard
You
may
submit
on
Blackboard
multiple
times
for
any
assignment
we
will
only
grade
the
last
most
recent
submission
unless
you
request
otherwise
Deadlines
Assignments
will
be
due
at
pm
on
the
duedate
There
is
a
hour
grace
period
for
late
program
submission
on
Blackboard
up
to
am
If
you
submit
in
this
timeframe
you
will
lose
a
point
for
each
late
hour
as
in
between
p
a
between
a
if
submitted
between
a
After
the
grace
period
programs
will
not
be
accepted
and
you
will
receive
no
credit
Style
All
program
code
must
conform
to
our
specific
coding
guidelines
using
the
checkstyle
utility
Points
will
be
deducted
for
violations
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat


